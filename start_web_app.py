#!/usr/bin/env python3
"""
Script de inicio para la aplicaci√≥n web PreditorIA2025
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path

def check_requirements():
    """Verifica que todos los requisitos est√©n disponibles"""
    print("üîç Verificando requisitos...")
    
    # Verificar modelo entrenado
    model_path = "data/logs/training/mobilenet_v2_final.h5"
    if not os.path.exists(model_path):
        print("‚ùå Modelo entrenado no encontrado en:", model_path)
        print("   Ejecuta primero el entrenamiento del modelo")
        return False
    print("‚úÖ Modelo entrenado encontrado")
    
    # Verificar resultados de clustering
    clustering_path = "clustering_results/clustering_results.pkl"
    if not os.path.exists(clustering_path):
        print("‚ö†Ô∏è  Resultados de clustering no encontrados en:", clustering_path)
        print("   Ejecuta primero el script de clustering")
        print("   La aplicaci√≥n funcionar√° sin clustering")
    else:
        print("‚úÖ Resultados de clustering encontrados")
    
    # Verificar dependencias de Python
    try:
        import flask
        import tensorflow as tf
        import numpy as np
        import PIL
        print("‚úÖ Dependencias de Python verificadas")
    except ImportError as e:
        print(f"‚ùå Dependencia faltante: {e}")
        print("   Ejecuta: pip install -r requirements.txt")
        return False
    
    return True

def create_directories():
    """Crea los directorios necesarios"""
    print("üìÅ Creando directorios necesarios...")
    
    directories = [
        "static/uploads",
        "static/results",
        "templates"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Directorio creado: {directory}")

def start_application():
    """Inicia la aplicaci√≥n Flask"""
    print("\nüöÄ Iniciando aplicaci√≥n PreditorIA2025...")
    print("="*50)
    
    try:
        # Ejecutar la aplicaci√≥n
        subprocess.run([sys.executable, "app.py"], check=True)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Aplicaci√≥n detenida por el usuario")
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Error ejecutando la aplicaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        return False
    
    return True

def open_browser():
    """Abre el navegador web"""
    print("üåê Abriendo navegador web...")
    time.sleep(2)  # Esperar a que la aplicaci√≥n se inicie
    
    try:
        webbrowser.open("http://localhost:5000")
        print("‚úÖ Navegador abierto en http://localhost:5000")
    except Exception as e:
        print(f"‚ö†Ô∏è  No se pudo abrir el navegador autom√°ticamente: {e}")
        print("   Abre manualmente: http://localhost:5000")

def show_instructions():
    """Muestra instrucciones de uso"""
    print("\n" + "="*60)
    print("üéØ PREDITORIA2025 - DASHBOARD WEB")
    print("="*60)
    print()
    print("üìã INSTRUCCIONES DE USO:")
    print("1. La aplicaci√≥n se ejecutar√° en: http://localhost:5000")
    print("2. Arrastra y suelta una imagen en el √°rea de carga")
    print("3. Haz clic en 'Analizar Imagen' para obtener predicciones")
    print("4. Revisa la secci√≥n 'Clustering' para ver estad√≠sticas")
    print()
    print("üîß FUNCIONALIDADES:")
    print("‚Ä¢ An√°lisis de categor√≠as de moda en tiempo real")
    print("‚Ä¢ B√∫squeda de im√°genes similares")
    print("‚Ä¢ Visualizaci√≥n de clusters y m√©tricas")
    print("‚Ä¢ Interfaz web moderna y responsiva")
    print()
    print("‚èπÔ∏è  Para detener la aplicaci√≥n: Ctrl+C")
    print("="*60)

def main():
    """Funci√≥n principal"""
    print("üéØ PreditorIA2025 - Dashboard Web")
    print("Sistema de An√°lisis de Moda con IA")
    print("="*40)
    
    # Verificar requisitos
    if not check_requirements():
        print("\n‚ùå No se pueden cumplir todos los requisitos")
        print("   Revisa los errores anteriores y vuelve a intentar")
        sys.exit(1)
    
    # Crear directorios
    create_directories()
    
    # Mostrar instrucciones
    show_instructions()
    
    # Preguntar si abrir navegador
    try:
        response = input("\n¬øAbrir navegador autom√°ticamente? (s/n): ").lower().strip()
        if response in ['s', 'si', 's√≠', 'y', 'yes']:
            open_browser()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego!")
        sys.exit(0)
    
    # Iniciar aplicaci√≥n
    print("\nüöÄ Iniciando servidor web...")
    start_application()

if __name__ == "__main__":
    main()
