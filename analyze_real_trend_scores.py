#!/usr/bin/env python3
"""
An√°lisis real de trend scores basado en la f√≥rmula actual del sistema
"""

import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

def analyze_real_trend_scores():
    """Analizar trend scores reales usando la f√≥rmula del sistema"""
    
    try:
        # Cargar datos de clustering
        with open('/home/jose/PreditorIA2025/clustering_results/clustering_results.pkl', 'rb') as f:
            clustering_results = pickle.load(f)
        
        print("üìä Analizando trend scores reales del sistema...")
        
        # Obtener datos reales
        cluster_counts = clustering_results.get('cluster_counts', {})
        total_images = clustering_results.get('total_images', 16959)
        n_clusters = clustering_results.get('n_clusters', 150)
        
        # Simular trend scores usando la f√≥rmula real del sistema
        trend_scores = []
        
        # Calcular cluster_sizes en el formato que usa el sistema
        cluster_sizes = {}
        for cluster_id, count in cluster_counts.items():
            cluster_sizes[f'cluster_{cluster_id}'] = count
        
        max_cluster_size = max(cluster_sizes.values()) if cluster_sizes else 1
        
        print(f"   Total clusters: {len(cluster_sizes)}")
        print(f"   Cluster m√°s grande: {max_cluster_size} im√°genes")
        
        # Generar trend scores para cada imagen usando la f√≥rmula real
        for cluster_id in range(n_clusters):
            cluster_key = f'cluster_{cluster_id}'
            cluster_size = cluster_sizes.get(cluster_key, 0)
            
            if cluster_size > 0:
                # Simular m√∫ltiples im√°genes para este cluster
                for _ in range(cluster_size):
                    # Simular similarity_score (0-1) con distribuci√≥n realista
                    similarity_score = np.random.beta(2, 5)  # Sesgado hacia valores bajos
                    
                    # APLICAR LA F√ìRMULA REAL DEL SISTEMA:
                    # 1. Score base por tama√±o del cluster (0-40 puntos)
                    size_score = (cluster_size / max_cluster_size) * 40
                    
                    # 2. Score por similitud (0-60 puntos)
                    similarity_contribution = similarity_score * 0.6
                    
                    # 3. Bonus por cluster grande (hasta 10 puntos)
                    if cluster_size > 100:
                        size_bonus = min(10, cluster_size / 100)
                    else:
                        size_bonus = 0
                    
                    # Score total
                    trend_score = min(100, size_score + similarity_contribution + size_bonus)
                    trend_scores.append(trend_score)
        
        trend_scores = np.array(trend_scores)
        
        # Calcular estad√≠sticas
        mean_score = np.mean(trend_scores)
        std_score = np.std(trend_scores)
        median_score = np.median(trend_scores)
        
        # Calcular percentiles
        p25 = np.percentile(trend_scores, 25)
        p50 = np.percentile(trend_scores, 50)
        p75 = np.percentile(trend_scores, 75)
        p90 = np.percentile(trend_scores, 90)
        
        print(f"\nüìà ESTAD√çSTICAS REALES DE TREND SCORES:")
        print(f"   Total de im√°genes: {len(trend_scores):,}")
        print(f"   Media: {mean_score:.2f}")
        print(f"   Mediana: {median_score:.2f}")
        print(f"   Desviaci√≥n est√°ndar: {std_score:.2f}")
        print(f"\nüìä PERCENTILES REALES:")
        print(f"   P25 (25%): {p25:.2f}")
        print(f"   P50 (50%): {p50:.2f}")
        print(f"   P75 (75%): {p75:.2f}")
        print(f"   P90 (90%): {p90:.2f}")
        
        # Proponer umbrales basados en percentiles reales
        print(f"\nüéØ UMBRALES REALES PROPUESTOS:")
        print(f"   NO EN TENDENCIA: < {p25:.0f} (25% de las im√°genes)")
        print(f"   NEUTRO: {p25:.0f} - {p75:.0f} (50% de las im√°genes)")
        print(f"   EN TENDENCIA: ‚â• {p75:.0f} (25% de las im√°genes)")
        
        # An√°lisis por componentes
        print(f"\nüîç AN√ÅLISIS DE COMPONENTES:")
        print(f"   Tama√±o m√°ximo de cluster: {max_cluster_size}")
        print(f"   Clusters > 100 im√°genes: {sum(1 for size in cluster_sizes.values() if size > 100)}")
        
        # Crear visualizaci√≥n
        plt.figure(figsize=(15, 10))
        
        # Histograma principal
        plt.subplot(2, 3, 1)
        plt.hist(trend_scores, bins=50, alpha=0.7, color='skyblue', edgecolor='black')
        plt.axvline(p25, color='red', linestyle='--', label=f'P25: {p25:.0f}')
        plt.axvline(p75, color='green', linestyle='--', label=f'P75: {p75:.0f}')
        plt.xlabel('Trend Score Real')
        plt.ylabel('Frecuencia')
        plt.title('Distribuci√≥n Real de Trend Scores')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # Box plot
        plt.subplot(2, 3, 2)
        plt.boxplot(trend_scores, vert=True)
        plt.ylabel('Trend Score Real')
        plt.title('Box Plot de Trend Scores Reales')
        plt.grid(True, alpha=0.3)
        
        # Distribuci√≥n por categor√≠as
        plt.subplot(2, 3, 3)
        categories = ['NO EN TENDENCIA', 'NEUTRO', 'EN TENDENCIA']
        counts = [
            np.sum(trend_scores < p25),
            np.sum((trend_scores >= p25) & (trend_scores < p75)),
            np.sum(trend_scores >= p75)
        ]
        colors = ['red', 'yellow', 'green']
        bars = plt.bar(categories, counts, color=colors, alpha=0.7)
        plt.ylabel('N√∫mero de Im√°genes')
        plt.title('Distribuci√≥n por Categor√≠as Reales')
        plt.xticks(rotation=45)
        
        # Agregar valores en las barras
        for bar, count in zip(bars, counts):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 50, 
                    f'{count:,}', ha='center', va='bottom')
        
        # Densidad
        plt.subplot(2, 3, 4)
        sns.kdeplot(trend_scores, fill=True, alpha=0.7)
        plt.axvline(p25, color='red', linestyle='--', label=f'P25: {p25:.0f}')
        plt.axvline(p75, color='green', linestyle='--', label=f'P75: {p75:.0f}')
        plt.xlabel('Trend Score Real')
        plt.ylabel('Densidad')
        plt.title('Densidad de Trend Scores Reales')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # An√°lisis por tama√±o de cluster
        plt.subplot(2, 3, 5)
        cluster_sizes_list = list(cluster_sizes.values())
        plt.hist(cluster_sizes_list, bins=30, alpha=0.7, color='orange', edgecolor='black')
        plt.xlabel('Tama√±o del Cluster')
        plt.ylabel('Frecuencia')
        plt.title('Distribuci√≥n de Tama√±os de Cluster')
        plt.grid(True, alpha=0.3)
        
        # Comparaci√≥n con umbrales actuales
        plt.subplot(2, 3, 6)
        current_thresholds = [2, 43]  # Umbrales actuales
        real_thresholds = [p25, p75]  # Umbrales reales
        
        x = ['P25', 'P75']
        y_current = current_thresholds
        y_real = real_thresholds
        
        x_pos = np.arange(len(x))
        width = 0.35
        
        plt.bar(x_pos - width/2, y_current, width, label='Umbrales Actuales', alpha=0.7, color='red')
        plt.bar(x_pos + width/2, y_real, width, label='Umbrales Reales', alpha=0.7, color='green')
        
        plt.xlabel('Percentiles')
        plt.ylabel('Valores de Umbral')
        plt.title('Comparaci√≥n de Umbrales')
        plt.xticks(x_pos, x)
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('/home/jose/PreditorIA2025/real_trend_distribution_analysis.png', dpi=300, bbox_inches='tight')
        print(f"\nüìä Gr√°fico guardado en: /home/jose/PreditorIA2025/real_trend_distribution_analysis.png")
        
        return {
            'p25': p25,
            'p50': p50,
            'p75': p75,
            'p90': p90,
            'mean': mean_score,
            'std': std_score,
            'trend_scores': trend_scores,
            'cluster_sizes': cluster_sizes
        }
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    results = analyze_real_trend_scores()
    if results:
        print(f"\n‚úÖ An√°lisis real completado exitosamente")
        print(f"   Umbrales reales recomendados: {results['p25']:.0f}, {results['p75']:.0f}")
        print(f"   Diferencia con umbrales actuales: P25={results['p25']-2:.1f}, P75={results['p75']-43:.1f}")
